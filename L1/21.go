package main
import "fmt"

/* 21. Реализовать паттерн «адаптер» на любом примере.

Adapter - структурный шаблон проектирования,
предназначенный для организации использования функции объекта,
недоступного для модификаций, через специально созданный интерфейс

зачем нужен паттерн адаптер?
чтобы решить следующую проблему:
имеется структура, и мы хотим, чтобы эта структура реализовывала определенный интерфейс, но структуру менять нельзя

идея реализации:
включение уже существующей структуры в другую структуру. Интерфейс включающей структуры приводится 
в соответствие с новыми требованиями, а вызовы его методов преобразуются в вызовы методов включённой структуры */
type Animal interface {
	makeVoice() string
}

type Adapter struct {
	Dog
}

type Dog struct {}

func (d Dog) Woof() string {
	return "woof"
}

func (a Adapter) makeVoice() string {
	return a.Woof()
}

func makeSound(a Animal) {
	woof := a.makeVoice()
	fmt.Print(woof)
}

func main() {
	dog := Dog{}
	adapter := Adapter{dog}
	makeSound(adapter)
}